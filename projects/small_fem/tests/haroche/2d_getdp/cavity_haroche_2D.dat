// Physics //
nm       = 1e-9;
mm       = 1e-3;
epsilon0 = 8.854187817e-3 * nm;
mu0      = 400* Pi * nm;

// User data //
DefineConstant[ F_HAR = {51.099e9, Name "Input/00Haroche/00Frequency"}       ];
DefineConstant[ S_PML = {1,        Name "Input/01Geometry/00PML size"}       ];
DefineConstant[ D_PML = {1,        Name "Input/01Geometry/01PML distance"}   ];
DefineConstant[ MSH_A = {10,       Name "Input/02Mesh/00Size Air"}           ];
DefineConstant[ MSH_P = {10,       Name "Input/02Mesh/00Size PML"}           ];
DefineConstant[ MSH_M = {10,       Name "Input/02Mesh/00Size Mirror"}        ];
DefineConstant[ MSH_M = {10,       Name "Input/02Mesh/00Size Mirror"}        ];
DefineConstant[ nEig  = {4,        Name "Input/03Eigenproblem/00Eigenvalue"} ];

// Constant //
DefineConstant[ cel            = {1 / (Sqrt[epsilon0 * mu0]),
                                  Name "Input/00Haroche/01Speed of light",
                                  ReadOnly 1} ];

DefineConstant[ lambda_haroche = {cel / F_HAR,
                                  Name "Input/00Haroche/02Wavelength",
                                  ReadOnly 1} ];

DefineConstant[ target         = { (F_HAR * 2 * Pi)^2,
                                  Name "Input/03Eigenproblem/01Target",
                                  ReadOnly 1} ];

// Wavenumber //
W_HAR = F_HAR * 2 * Pi;
K_HAR = W_HAR / cel;

Printf("%f", K_HAR);

// Geomtrical Parameters //
// Mirror
R_small             = 39.4   * mm;
R_big               = 40.6   * mm;
R                   = R_big;
L_cav               = 27.57  * mm;
thick_mirror_center =  1.415 * mm;
radius_mirror       = 25     * mm;

// PML
dist2PML_x = D_PML * lambda_haroche;
dist2PML_y = D_PML * lambda_haroche;
pml_x      = S_PML * lambda_haroche;
pml_y      = S_PML * lambda_haroche;

// Rest
apert = Sqrt[R^2 - radius_mirror^2] + L_cav / 2 - R;
box_x = radius_mirror + dist2PML_x;
box_y = L_cav / 2 + thick_mirror_center + dist2PML_y;

// Mesh
paramaille_air  = lambda_haroche / MSH_A;
paramaille_pml  = lambda_haroche / MSH_P;
paramaille_mir  = lambda_haroche / MSH_M;
